{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","memo","name","value","setNewValue","isFormatValid","setIsFormatValid","label","required","isFieldValidCustom","useState","Math","random","toString","slice","id","touched","setTouched","isFormatChanged","setIsFormatChanged","hasError","trim","htmlFor","classNames","type","placeholder","onChange","event","newValue","target","onBlur","isFieldValid","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isImgUrlValid","setIsImgUrlValid","isImdbUrlValid","setIsImdbUrlValid","isButtonDisabled","isUrlValid","useCallback","RegExp","test","onSubmit","preventDefault","current","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17162859.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { ChangeEvent, memo, useState } from 'react';\n\ntype Props = {\n  name: string;\n  value: string;\n  setNewValue: (newValue: string) => void;\n  isFormatValid?: boolean;\n  setIsFormatValid?: (newValue: boolean) => void;\n  label?: string;\n  required?: boolean;\n  isFieldValidCustom?: (newValue: string) => boolean;\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = memo(({\n  name,\n  value,\n  setNewValue,\n  isFormatValid = true,\n  setIsFormatValid = () => {},\n  label = name,\n  required = false,\n  isFieldValidCustom = () => true,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setTouched] = useState(false);\n  const [isFormatChanged, setIsFormatChanged] = useState(false);\n\n  const hasError = touched && required && !value.trim();\n\n  function onBlur(): void {\n    setTouched(true);\n\n    const isFieldValid = isFieldValidCustom(value);\n\n    setIsFormatValid(isFieldValid);\n    setIsFormatChanged(false);\n  }\n\n  function onChange(event: ChangeEvent<HTMLInputElement>): void {\n    const newValue = event.target.value;\n\n    setNewValue(newValue);\n    setIsFormatChanged(true);\n    setIsFormatValid(false);\n  }\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames(\n            'input',\n            {\n              'is-danger': hasError || (!isFormatValid && !isFormatChanged),\n            },\n          )}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={onBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">\n          {`${label} is required`}\n        </p>\n      )}\n\n      {(!isFormatValid && !hasError && !isFormatChanged) && (\n        <p className=\"help is-danger\">\n          {`${label} format is not valid`}\n        </p>\n      )}\n    </div>\n  );\n});\n","import {\n  FC,\n  FormEvent,\n  useCallback,\n  useState,\n} from 'react';\n\nimport { TextField } from '../TextField';\n\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [isImgUrlValid, setIsImgUrlValid] = useState(true);\n  const [isImdbUrlValid, setIsImdbUrlValid] = useState(true);\n\n  const isButtonDisabled = !title\n    || !imgUrl || !isImgUrlValid\n    || !imdbUrl || !isImdbUrlValid\n    || !imdbId;\n\n  function handleSubmit(event: FormEvent<HTMLFormElement>): void {\n    event.preventDefault();\n\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n\n    setCount(current => current + 1);\n  }\n\n  const isUrlValid = useCallback((newValue: string): boolean => {\n    const pattern = new RegExp('^((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)(?:[-;:&=+$,'\n      + '\\\\w]+@)?[A-Za-z0-9.-]+|(?:www'\n      + '\\\\.|[-;:&=+$,\\\\w]+@)[A-Za-z0-9.-]+)((?:'\n      + '\\\\/[+~%/.\\\\w-_]*)?\\\\??(?:[-+=&;%@,.'\n      + '\\\\w_]*)#?(?:[,.!/\\\\\\\\\\\\'\n      + 'w]*))?)$');\n\n    return pattern.test(newValue);\n  }, []);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        setNewValue={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        setNewValue={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        setNewValue={setImgUrl}\n        isFormatValid={isImgUrlValid}\n        setIsFormatValid={setIsImgUrlValid}\n        isFieldValidCustom={isUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        setNewValue={setImdbUrl}\n        isFormatValid={isImdbUrlValid}\n        setIsFormatValid={setIsImdbUrlValid}\n        isFieldValidCustom={isUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        setNewValue={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isButtonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { FC, useState } from 'react';\n\nimport { Movie } from './types/Movie';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([...moviesFromServer]);\n\n  const addMovie = (movie: Movie) => setMovies([...movies, movie]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}